@model ProductListViewModel
@using Entities.Concrete
@{
    Layout = "_Layout";
}
<div id="toastBox" class="toast" style="display:none;">
    @TempData["Message"]
</div>


<div style="width:50%; display:flex; gap:1rem;">
    <input id="searchInput" class="form form-control" type="search" placeholder="Aramak istediğiniz kelimeyi yazın." />

    <select id="sortSelect" class="form form-control">
        <option value="">Sırala</option>
        <option value="name-asc">A'dan Z'ye</option>
        <option value="name-desc">Z'den A'ya</option>
        <option value="price-asc">Fiyata Göre (Ucuzdan Pahalıya)</option>
        <option value="price-desc">Fiyata Göre (Pahalıdan Ucuza)</option>
    </select>
    </div>
<div class="p-content">
    @{
        List<CouponProduct> couponProducts = Model.couponProducts != null

        ? Model.couponProducts
        : new List<CouponProduct>();

        List<Coupon> coupons = Model.coupons != null
        ? Model.coupons
        : new List<Coupon>();
    }

    
    @foreach (var product in Model.Products)
    {
        var matchingCouponProduct = couponProducts.FirstOrDefault(cp => cp.ProductId == product.ProductId);
        var matchedCoupon = matchingCouponProduct != null
        ? coupons.FirstOrDefault(c => c.CouponId == matchingCouponProduct.CouponId)
        : null;
        string imgurl = "";
        if (Model.ProductImages != null && Model.ProductImages.ContainsKey(product.ProductId) && Model.ProductImages[product.ProductId].Any())
        {
            imgurl = Model.ProductImages[product.ProductId].Last().ImageBase64; // Son resmi alıyoruz
        }

        @* İndirim etiketi *@
       
        <div class="ml-product" data-name="@product.Name.ToLower()" data-price="@product.Price">
            <div class="p-product-box" style="background-image:url('@imgurl'); width:15rem; height:15rem;">

                @* İndirim etiketi *@
                @if (matchedCoupon != null)
                {
                    <div style="position:absolute; top:0.5rem; right:0.5rem; background-color:red; color:white; padding:4px 8px; font-size:0.8rem; border-radius:0.5rem;">
                        %@matchedCoupon.Discount.ToString("F0") İndirim
                    </div>
                }
                
                <form action="@Url.Action("ProductDetail", "Product")">
                    <input type="hidden" name="ProductId" value="@product.ProductId" />
                    <button class="pb-btn" type="submit" style="border:none;width:3rem; height:3rem;">
                        <i class="fa-regular fa-eye"></i>
                    </button>
                </form>
                <form method="post" action="@Url.Action("AddToWL", "WishListItem")">
                    <input type="hidden" name="ProductId" value="@product.ProductId" />
                    <button class="pb-btn" type="submit" style="border:none; width:3rem; height:3rem;">
                        <i class="fa-regular fa-heart"></i>
                    </button>
                </form>
              
            </div>
         
            <h4 style="font-weight:700;">@product.Name</h4>
            <h6 class="text-muted">@product.Price ₺</h6>
        </div>
    }

</div>

    <script>
    const searchInput = document.getElementById("searchInput");
    const sortSelect = document.getElementById("sortSelect");
    const productItems = document.querySelectorAll(".ml-product");

    function filterAndSort() {
        const searchValue = searchInput.value.toLowerCase();
        const sortValue = sortSelect.value;

        const products = Array.from(productItems);

        // 1. Arama filtresi
        let filtered = products.filter(p => {
            const name = p.dataset.name;
            return name.includes(searchValue);
        });

        // 2. Sıralama
        if (sortValue === "name-asc") {
            filtered.sort((a, b) => a.dataset.name.localeCompare(b.dataset.name));
        } else if (sortValue === "name-desc") {
            filtered.sort((a, b) => b.dataset.name.localeCompare(a.dataset.name));
        } else if (sortValue === "price-asc") {
            filtered.sort((a, b) => parseFloat(a.dataset.price) - parseFloat(b.dataset.price));
        } else if (sortValue === "price-desc") {
            filtered.sort((a, b) => parseFloat(b.dataset.price) - parseFloat(a.dataset.price));
            }

        // 3. Ekranı güncelle
        const container = document.querySelector(".p-content");
        container.innerHTML = ""; // Önce boşalt
        filtered.forEach(p => container.appendChild(p)); // Sıralı şekilde tekrar ekle
        }

    searchInput.addEventListener("input", filterAndSort);
    sortSelect.addEventListener("change", filterAndSort);
    </script>
} *@

